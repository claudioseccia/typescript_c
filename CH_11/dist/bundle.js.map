{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://understanding-ts/./src/components/base-component.ts","webpack://understanding-ts/./src/decorators/autobind.ts","webpack://understanding-ts/./src/util/validation.ts","webpack://understanding-ts/./src/model/project.ts","webpack://understanding-ts/./src/state/project-state.ts","webpack://understanding-ts/./src/components/project-input.ts","webpack://understanding-ts/./src/components/project-item.ts","webpack://understanding-ts/./src/components/project-list.ts","webpack://understanding-ts/./src/app.ts"],"sourcesContent":["//\n//Component Base Class (base class for ProjectList)\n//select elements on the DOM, has the attach method and manages shared functionalities\n// T, U --> generics!\n//component: UI renderable component with some functionalities in it\n//\n//ABSTRACT CLASS CANNOT BE INSTANTIATED, ONLY USED FOR INHERITANCE\nexport default abstract class Component<\n  T extends HTMLElement,\n  U extends HTMLElement\n> {\n  //T and U will be some kind of HTML element, depending of the needs (different from the two extending classes for hostElement and element)\n  templateElement: HTMLTemplateElement;\n  hostElement: T;\n  element: U;\n  //constructor parameters:\n  //templateId - id to know how to select it\n  //hostElementId -  id of where to render this component\n  //insertAtStart - for the attach method\n  //OPTIONAL PARAMETERS ALWAYS AS LAST!:\n  //newElementId - id the element to attach (optional with the ? operator - alternative --> newElementId: string | undefined )\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtBeginning: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(hostElementId)! as T;\n\n    const importedNode = document.importNode(\n      this.templateElement.content,\n      true\n    ); //true stands to import all the nodes inside of the html\n    this.element = importedNode.firstElementChild as U; //set this.element as the firstElementChild (<section class=\"projects\">...</section>)\n    if (newElementId) {\n      this.element.id = newElementId; //assign the id to the element dynamically, either for active or finished projects\n    }\n    this.attach(insertAtBeginning);\n  }\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\n      this.element\n    );\n  }\n\n  //force with abstract, any class that will inherit this one to have a configure and renderContent method:\n  abstract configure(): void;\n  abstract renderContent(): void;\n}\n","//Decorators\n//Autobind decorator\nexport function Autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    },\n  };\n\n  return adjDescriptor;\n}\n","//Validation\n//Validator decorator\n//? optional operator ---> ex. required?: boolean <-- means required must be a boolean or undefined\nexport interface Validatable {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\nexport function validate(validatableInput: Validatable) {\n  // check for all the properties to exeist and do the proper validatiion\n  let isValid = true; //basic flag, set to true ->goes to false as soon as one of the checks fails\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n  }\n  //minLength check\n  if (validatableInput.minLength) {\n    //!= null -->this check includes null and undefined --> we're checking even if minLenght is zero\n    if (\n      validatableInput.minLength != null &&\n      typeof validatableInput.value === \"string\"\n    ) {\n      isValid =\n        isValid && validatableInput.value.length >= validatableInput.minLength;\n    }\n  }\n  //maxLength check\n  if (validatableInput.maxLength) {\n    if (\n      validatableInput.maxLength != null &&\n      typeof validatableInput.value === \"string\"\n    ) {\n      isValid =\n        isValid && validatableInput.value.length <= validatableInput.maxLength;\n    }\n  }\n  //min check\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  //max check\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n\n  return isValid;\n}\n","//Project Type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n//Poject object definition:\nexport class Project {\n  //assigning properties to the constructor automatically instantiates the properties\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public people: number,\n    public status: ProjectStatus\n  ) {}\n}\n","import { Project, ProjectStatus } from \"../model/project\";\n//Project State Management\n//type Listener definition - FUNCTION\n//type Listener = (items: Project[]) => void; //the listener function doesn't need to have a return, hence void\n//generic type definition fro State Class\ntype Listener<T> = (items: T[]) => void;\n//\n\n//State Class\n//generic class defining the state (to be inherited by ProjectState)\nclass State<T> {\n  //protected, private but accessible from classes that inherits:\n  protected listeners: Listener<T>[] = []; //array of function references. Everytime something changes we call a listener function\n  //subscription pattern: we manage a list of listeners called whenever something changes\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn);\n  }\n}\n\n//ProjectState Class (singleton)\n//class to manage the state of my appplication, and setup listeners for the various parts of my application\nexport class ProjectState extends State<Project> {\n  //listeners\n  //private listeners: Listener[] = []; //array of function references. Everytime something changes we call a listener function\n  //array of projects\n  private projects: Project[] = [];\n  //SINGLETON sutup\n  private static instance: ProjectState;\n  private constructor() {\n    //for extending the State class:\n    super();\n  }\n  static getInstance() {\n    if (this.instance) {\n      return this.instance;\n    } else {\n      this.instance = new ProjectState();\n      return this.instance;\n    }\n  }\n  //end SINGLETON sutup\n  //not needed (parent class):\n  //subscription pattern: we manage a list of listeners called whenever something changes\n  // addListener(listenerFn: Listener) {\n  //   this.listeners.push(listenerFn);\n  // }\n  //add new Project\n  addProject(title: string, description: string, numOfPeople: number) {\n    //project I want to store\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      numOfPeople,\n      ProjectStatus.Active\n    );\n    this.projects.push(newProject);\n    //refactoring to this.updateListeners()\n    // for (const listenerFn of this.listeners) {\n    //   listenerFn(this.projects.slice()); //slice will return a copy of that array, array and objects are reference values in javascript\n    // }\n    this.updateListeners();\n  }\n\n  //function to change the state of the project after dragging and dropping\n  //move from the list it is currently in to a new list\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    //find a project with that id in the array of projects\n    const project = this.projects.find((prj) => prj.id === projectId);\n    if (project && project.status !== newStatus) {\n      project.status = newStatus; //changes the object in the array\n      this.updateListeners();\n    }\n  }\n\n  private updateListeners() {\n    //refactoring to allow DRY of code, updates all the listeners on state change\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice()); //slice will return a copy of that array, array and objects are reference values in javascript\n    }\n  }\n}\n//we now need to call addProject from ProjectList when submitting the form and display the result on ProjectList\n//create a global instance of ProjectState using the static getInstance method:\n//SINGLETON: we'll have only one object instance of the type for the entire application!\nexport const projectState = ProjectState.getInstance();\n","import Component from \"./base-component\"; //default export in base-component.js(single element on that file to be exported as default)\n// import Cmp from \"./base-component.js\";  //we can also use a different name in respect of the one used in base-component default export\n\nimport { Autobind } from \"../decorators/autobind\";\nimport * as Validation from \"../util/validation\"; //grouping everything within the object Validation\nimport { projectState } from \"../state/project-state\";\n//ProjectInput Class\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  //inherited by Component class:\n  // templateElement: HTMLTemplateElement;\n  // hostElement: HTMLDivElement; //or generic HTMLElement\n  // element: HTMLFormElement;\n  titleInputElement: HTMLInputElement;\n  descriptionInputElement: HTMLInputElement;\n  peopleInputElement: HTMLInputElement;\n  constructor() {\n    super(\"project-input\", \"app\", true, \"user-input\");\n    // this.templateElement = <HTMLTemplateElement>(\n    //   document.getElementById(\"project-input\")!\n    // ); //! to tell ts that the element will exist for sure in the dom (it won't be null!)\n    //or\n    //inherited by Component class:\n    // this.templateElement = document.getElementById(\n    //   \"project-input\"\n    // )! as HTMLTemplateElement; //same as above!\n    // this.hostElement = document.getElementById(\"app\")! as HTMLDivElement;\n    // //\n    // //render the content of templateElement (the form) inside the hostElement (the div)\n    // const importedNode = document.importNode(\n    //   this.templateElement.content,\n    //   true\n    // ); //true stands to import all the nodes inside of the html\n    // this.element = importedNode.firstElementChild as HTMLFormElement;\n    // this.element.id = \"user-input\"; //assign the id to the element so that the css will apply correctly the styles for that id\n\n    //access the different input elements:\n    this.titleInputElement = this.element.querySelector(\n      \"#title\"\n    )! as HTMLInputElement;\n    this.descriptionInputElement = this.element.querySelector(\n      \"#description\"\n    )! as HTMLInputElement;\n    this.peopleInputElement = this.element.querySelector(\n      \"#people\"\n    )! as HTMLInputElement;\n    //bind the submit of the form to an internal method (submitHandler)\n    this.configure();\n    //run the private method to put the template inside app\n    //inherited by Component class:\n    // this.attach();\n  }\n  //PUBLIC METHODS\n  // private configure() {\n  //have to set it as public since is inherited\n  configure() {\n    //setup an event listener and bind to submit to the private submitHandler method\n    this.element.addEventListener(\"submit\", this.submitHandler);\n    //binding is not necessary with @Autobind decorator\n    //this.element.addEventListener(\"submit\", this.submitHandler.bind(this)); //(*) bind(this) tells that this keyword inside submitHandler() will refer to the same this into the context (the class)\n  }\n  //to be compiant of the Component class we inherit from\n  renderContent() {}\n  //PRIVATE METHODS\n  private gatherUserInput(): [string, string, number] | void {\n    //[string, string, number] --> example of a tuple definition, we want three elements of three different types\n    //union type with void is made for the return value of nathing. Alternatively we can implement error handling and throw new error\n    const enteredTitle = this.titleInputElement.value;\n    const enteredDescription = this.descriptionInputElement.value;\n    const enteredPeople = this.peopleInputElement.value;\n\n    /* \n    //trivial validation\n    //check that no input is empty\n    if (\n      enteredTitle.trim().length === 0 ||\n      enteredDescription.trim().length === 0 ||\n      enteredPeople.trim().length === 0\n    ) {\n      //more checks, ex.\n      //check length of description\n      //check minumum number of people... etc\n      alert(\"Invalid input, please try again!\");\n      return; //void return value, function is not returning anything\n    } else {\n      return [enteredTitle, enteredDescription, +enteredPeople]; //+ number conversion, everything extracted with .value from DOM is text\n    }\n    */\n    //construct my Validatable objects\n    const titleValidatable: Validation.Validatable = {\n      value: enteredTitle,\n      required: true,\n    };\n    const descriptionValidatable: Validation.Validatable = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n    const peopleValidatable: Validation.Validatable = {\n      value: +enteredPeople,\n      required: true,\n      min: 1,\n      max: 5,\n    };\n\n    if (\n      !Validation.validate(titleValidatable) ||\n      !Validation.validate(descriptionValidatable) ||\n      !Validation.validate(peopleValidatable)\n    ) {\n      alert(\"Invalid input, please try again!\");\n      return; //void return value, function is not returning anything\n    } else {\n      return [enteredTitle, enteredDescription, +enteredPeople]; //+ number conversion, everything extracted with .value from DOM is text\n    }\n  }\n  //clear all the inputs after the form submit\n  private clearInputs() {\n    this.titleInputElement.value = \"\";\n    this.descriptionInputElement.value = \"\";\n    this.peopleInputElement.value = \"\";\n  }\n  @Autobind\n  private submitHandler(event: Event) {\n    event.preventDefault(); //prevent http submit request!!!\n    console.log(\"SUBMITTED!\");\n    //the this keyword does not point at the class\n    //when we bind an element to an event  (see configure method)\n    //console.log(this.titleInputElement.value); //!!ERROR!! IF WE DON'T BIND THE EVENT LISTENER IN configure() (*)\n    const userInput = this.gatherUserInput(); //might be a tuple\n    //cannot use typeof check for tuple, we use just array check in vanilla JS\n    if (Array.isArray(userInput)) {\n      const [title, desc, people] = userInput; //array destructuring\n      console.log(title, desc, people);\n      projectState.addProject(title, desc, people);\n      this.clearInputs(); //clear inputs after form submission\n    }\n  }\n\n  //inherited by Component class:\n  // private attach() {\n  //   this.hostElement.insertAdjacentElement(\"afterbegin\", this.element);\n  // }\n}\n","import { Draggable } from \"../model/drag-drop\";\nimport { Project } from \"../model/project\";\nimport Component from \"./base-component\";\nimport { Autobind } from \"../decorators/autobind\";\n//ProjectItem component\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n  //getter to get the proper number of people\n  get persons() {\n    if (this.project.people === 1) {\n      return \"1 person\";\n    } else {\n      return `${this.project.people} persons`;\n    }\n  }\n  constructor(hostId: string, project: Project) {\n    super(\"single-project\", hostId, false, project.id); //\"single-project\" ->template id, hostId -> host element ID, insert at the beginning (true), id -> id to be assigned to the newly created element\n    this.project = project;\n    this.configure();\n    this.renderContent();\n  }\n  //Draggable interface method implementation\n  @Autobind\n  dragStartHandler(event: DragEvent) {\n    // console.log(event);\n    //DRAG AND DROP\n    event.dataTransfer!.setData(\"text/plain\", this.project.id); //! it won't be null\n    event.dataTransfer!.effectAllowed = \"move\";\n  }\n  dragEndHandler(event: DragEvent) {\n    console.log(\"DragEnd\" + event);\n  }\n  //use configure to reach elements where to implement drag and drop\n  configure() {\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\n  }\n  renderContent() {\n    //added h2, h3 and p to the id \"single-project\" in index.html\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\n    this.element.querySelector(\"h3\")!.textContent = this.persons + \" assigned\"; //this.persons triggers the getter (get persons())\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\n  }\n}\n","import Component from \"./base-component\";\nimport { DragTarget } from \"../model/drag-drop\";\nimport { Project, ProjectStatus } from \"../model/project\";\nimport { Autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\nimport { ProjectItem } from \"./project-item\";\n//ProjectList Class\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  //inherited by Component class:\n  // templateElement: HTMLTemplateElement;\n  // hostElement: HTMLDivElement;\n  // element: HTMLElement;\n  assignedProjects: Project[];\n  //type of the project we'll expect when we'll instantiate the class is 'active' or 'finished'\n  constructor(private type: \"active\" | \"finished\") {\n    super(\"project-list\", \"app\", false, `${type}-projects`); //call the constructor from Component class\n    //inherited by Component class:\n    // this.templateElement = document.getElementById(\n    //   \"project-list\"\n    // )! as HTMLTemplateElement; //same as above!\n    // this.hostElement = document.getElementById(\"app\")! as HTMLDivElement;\n    this.assignedProjects = [];\n    //inherited by Component class:\n    // const importedNode = document.importNode(\n    //   this.templateElement.content,\n    //   true\n    // ); //true stands to import all the nodes inside of the html\n    // this.element = importedNode.firstElementChild as HTMLElement; //set this.element as the firstElementChild (<section class=\"projects\">...</section>)\n    // this.element.id = `${this.type}-projects`; //assign the id to the element dynamically, either for active or finished projects\n    //add a listener to the globally available projectState.addListener function\n    //\n    //moved in the configure() method, called at the boottom:\n    // projectState.addListener((projects: Project[]) => {\n    //   //filter the projects based on the type (finished or active)\n    //   const relevantProjects = projects.filter((prj) => {\n    //     if (this.type === \"active\") {\n    //       return prj.status === ProjectStatus.Active;\n    //     }\n    //     return prj.status === ProjectStatus.Finished;\n    //   }); //filter only the desired values and assign to a new list: relevantProjects\n    //   // this.assignedProjects = projects;\n    //   this.assignedProjects = relevantProjects;\n    //   this.renderProjects();\n    // }); //pass an anonymous function\n    // this.attach(); //already called in the Component class\n\n    this.configure();\n    this.renderContent();\n  }\n  //DROPPABLE IMPLEMENTATION\n  @Autobind\n  dragOverHandler(event: DragEvent) {\n    //DRAG AND DROP\n    //chack if drag and drop is allowed here:\n    //ckeck the same dataTransfer type of dragStartHandler of projectItem\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault(); //prevent default to tell js that for this element you will allow dropping - we'll now allow dropHandeler to occur\n      //signal the browser and js that the thing we're trying to drag over is a valid drag target\n      //_ silent warnings for typescript not being event used in the function\n      //change the appearance of my draggable element: add the droppable class to the ul\n      const listEl = this.element.querySelector(\"ul\")!;\n      listEl.classList.add(\"droppable\"); //adds .droppable to ul emenents (droppable container): pink background (active) and bluette background (finished) on dragover\n    }\n  }\n  @Autobind\n  dropHandler(event: DragEvent) {\n    //console.log(event.dataTransfer!.getData(\"text/plain\")); //project id we attached\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\n    //change the project status from active to finished and viceversa\n    projectState.moveProject(\n      prjId,\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\n    ); //this.type resolves to the ProjectList type of the surrinding class\n  } //react to actual drop happens (and update data in the app)\n  @Autobind\n  dragLeaveHandler(_: DragEvent) {\n    //update the style leaving the droppable area\n    const listEl = this.element.querySelector(\"ul\")!;\n    listEl.classList.remove(\"droppable\");\n  }\n\n  //PUBLIC METHODS\n  configure() {\n    //DRAG AND DROP EVENT LISTENERS\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\n    this.element.addEventListener(\"drop\", this.dropHandler);\n    //\n    projectState.addListener((projects: Project[]) => {\n      //filter the projects based on the type (finished or active)\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === \"active\") {\n          return prj.status === ProjectStatus.Active;\n        }\n        return prj.status === ProjectStatus.Finished;\n      }); //filter only the desired values and assign to a new list: relevantProjects\n      // this.assignedProjects = projects;\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n  // private renderContent() { //already abstract in Component class\n  renderContent() {\n    //populate the fields\n    const listId = `${this.type}-project-lists`;\n    this.element.querySelector(\"ul\")!.id = listId; //add ids to the ul elements\n    this.element.querySelector(\"h2\")!.textContent =\n      this.type.toUpperCase() + \" PROJECTS\";\n  }\n  //PRIVATE METHODS\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-project-lists`\n    )! as HTMLUListElement;\n    //fix duplication clearing the html of the listEl\n    listEl.innerHTML = \"\";\n    //render all the projects we have\n    for (const prjItem of this.assignedProjects) {\n      // const listItem = document.createElement(\"li\");\n      // listItem.textContent = prjItem.title;\n      // listEl?.appendChild(listItem);\n      //use the ProjectItem class (9.13):\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem);\n    }\n  }\n\n  //inherited by Component class:\n  // private attach() {\n  //   this.hostElement.insertAdjacentElement(\"beforeend\", this.element);\n  // }\n}\n","//npx tsc -w\n//npm start\n//****************************************\n//****************************************\n//10.03 - Working with namespaces\n//create drag-drop-interfaces.ts and move interfaces code there\n//create project-model.js and move model there\n//use a single namespace through all of them (ex. App), and create the same namespace in app.ts\n//IMPORTANT: ENABLE: \"outFile\": \"./dist/bundle.js\" AND change \"module\": \"commonjs\", TO \"module\": \"amd\", IN tsconfig.json to allow JS transpiling in one single file\n//NOW: bundle.js is created (change the import from app.js to bundle.js )\n//IMPORT in index.html ./dist/bundle.js in place of ./dist/app.js\n//add three slashes to import reference to a namespace\n/*\n//move the drag & drop interfaces to a separate file:\n/// <reference path=\"drag-drop-iterfaces.ts\" />\n//move the project model to a separate file:\n/// <reference path=\"project-model.ts\" />\n*/\n//****************************************\n//10.04 - Organizing files and folders\n/*\n//move the project state to a separate file:\n/// <reference path=\"project-state.ts\" />\n//move validation to a separate file:\n/// <reference path=\"validation.ts\" />\n//move decorators to a separate file:\n/// <reference path=\"autobind-decorator.ts\" />\n*/\n/* \n//organize in folders:\n/// <reference path=\"./model/drag-drop.ts\" />\n/// <reference path=\"./model/project.ts\" />\n/// <reference path=\"./state/project-state.ts\" />\n/// <reference path=\"./util/validation.ts\" />\n/// <reference path=\"./decorators/autobind.ts\" />\n/// <reference path=\"./components/base-component.ts\" />\n/// <reference path=\"./components/project-input.ts\" />\n/// <reference path=\"./components/project-item.ts\" />\n/// <reference path=\"./components/project-list.ts\" /> \n*/\n\n//****************************************\n//10.05 - A problem with namespaces Imports\n//Include as a namespace reference only what is needed (best of both worlds?)\n\n//****************************************\n//10.07 - Using ES6 Modules\n//remember to import all required references with .js extension!\n//change \"module\": \"commonjs\", TO \"module\": \"es2015\", IN tsconfig.json to enable es6 modules AND comment \"outFile\"\n//this will replicate the structure of typescript instead of a unique file bundle.js\n//import app.js in index.html, remove defer attribute and add type=\"module\"\n\n//****************************************\n//10.08 - Understanding various Import & Export Syntaxes\n\n//MODULES are imported only once. It's preferred on Namespaces. With Webpack (CH11) we can also have bundling\n\n// More-on-JS-Modules\n// https://medium.com/computed-comparisons/commonjs-vs-amd-vs-requirejs-vs-es6-modules-2e814b114a0b\n\n//****************************************\n//11.04 - Installing Webpack & Important Dependencies\n//run:\n//npm install --save-dev webpack webpack-cli webpack-dev-server typescript ts-loader\n//\n//****************************************\n//11.05 - Adding Entry & Output Configuration\n//in tsconfig.json:\n//comment entry: \"rootDir\": \"./src\",    <-- webpack manages that\n//keep: \"target\": \"es6\",  -- \"module\": \"es2015\",\n//create another configuration file: webpack.config.js\n//insert into that:\n/*\nconst path = require(\"path\");\nmodule.exports = {\n    entry: \"./src/app.ts\",\n    output: {\n        filename: \"bundle.js\",\n        path: path.resolve(__dirname,'dist')\n    },\n    \n};\n*/\n//remove all .js from the imports of ALL the files, like: import { ProjectInput } from \"./components/project-input\";\n//****************************************\n//11.06 - Adding TypeScript Support with the ts-loader Package\n// add these lines to module.exports in webpack.config.js:\n/*\n module: {\n        rules: [ //define the tests and use ts-lader excludin node_modules\n            {\n                test: /\\.ts$/,\n                use: \"ts-loader\",\n                exclude: /node_modules/\n            }\n        ]\n    },\n    resolve: {\n        extensions: [\".ts\",\".js\"] //bundles all ts and js extensions file\n    }\n*/\n// go back in ts-config.json and make sure \"sourceMap\": true, is enabled\n// to add webpack.config.js in  module.exports:\n//devtools: \"inline-source-map\",\n// go to package.json file and add to scripts:\n/* \n\"scripts\": {\n    ...\n    \"build\": \"webpack\"\n}\n*/\n// remove everything in /dist folder\n//RUN: npm run build\n//modify index.html to point to bundle.js: <script type=\"module\" src=\"dist/bundle.js\"></script>\n//run: npm start <-- test the application with lite-server\n\n//****************************************\n//11.07 - Finishing the Setup & Adding webpack-dev-server\n//add two environments: one for production and one for development\n// add webpack-dev-server to package.json\n/*\n\"scripts\": {\n    ...\n    \"start\": \"webpack-dev-server\",\n...\n*/\n\n//NOTE: for webpack-dev-server 4+\n//https://stackoverflow.com/questions/71602863/webpack-dev-server-cannot-get\n//change this in webpack.config.js\n/* \noutput: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/dist/',\n},\ndevServer: {\n    static: {\n        directory: path.join(__dirname, '/')\n    }\n}... \n*/\n//AND SET THIS IN package.json:\n/*\n\"scripts\": {\n    ...\n    \"start\": \"webpack serve\",\n    ...\n*/\n//IN webpack.config.js\n//mode: 'development',\n//devtool: 'inline-source-map',\n//will give more meaningful error messages!\n//****************************************\n//11.08 - Adding a Production Workflow\n//create webpack.config.prod.js\n//change entry: devtool: 'nosources-source-map', <-- https://webpack.js.org/configuration/devtool/\n//npm install --save-dev clean-webpack-plugin\n//in package.json, add: \"build\": \"webpack --config webpack.config.prod.js\"\nimport { ProjectInput } from \"./components/project-input\";\nimport { ProjectList } from \"./components/project-list\";\n\nnew ProjectInput();\nnew ProjectList(\"active\");\nnew ProjectList(\"finished\");\nconsole.log(\"HI\");\n"],"names":["Component","constructor","templateId","hostElementId","insertAtBeginning","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAdjacentElement","Autobind","_","_2","descriptor","originalMethod","value","configurable","get","bind","validate","validatableInput","isValid","required","toString","trim","length","minLength","maxLength","min","max","ProjectStatus","Project","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","console","log","userInput","Array","isArray","desc","ProjectItem","persons","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}